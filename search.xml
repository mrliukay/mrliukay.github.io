<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Pig开源项目学习-package-info.java的作用</title>
      <link href="/liukai/2023/05/10/Pig%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0-package-info-java%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
      <url>/liukai/2023/05/10/Pig%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0-package-info-java%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="package-info-java的作用"><a href="#package-info-java的作用" class="headerlink" title="package-info.java的作用"></a>package-info.java的作用</h1><blockquote><p>摘要:</p><p>本文主要介绍Java中一种特殊的.java后缀java文件package-info.java作用</p></blockquote><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><blockquote><p>作用:</p><ul><li><strong>为标注在包上的注解Annotation提供便利</strong> (我们可以统一处理该注解包下的所有类，比如初始化，检查等等)</li><li><strong>声明友好类和包常量</strong> </li><li><strong>提供包的整体注释说明</strong></li></ul><p>概括:</p><p>pacakge-info.java是一个Java文件，可以添加到任何的Java源码包中。pacakge-info.java的目标是提供一个包级的文档说明或者是包级的注释。</p></blockquote><blockquote><p>pacakge-info.java文件中，<strong>唯一要求包含的内容是包的声明语句</strong>，比如:</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* This is domain module, the core business logic is implemented here.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> com.rickie.tracking.domain;</span><br></pre></td></tr></table></figure><h2 id="2-创建方式"><a href="#2-创建方式" class="headerlink" title="2 创建方式"></a>2 创建方式</h2><blockquote><p>IDEA中创建方式截图如下:</p></blockquote><p><img src="https://gitee.com/mrkay0313/images/raw/master/img/20230510154945.png"></p><h2 id="3-友链"><a href="#3-友链" class="headerlink" title="3 友链"></a>3 友链</h2><blockquote><p>详情参考:</p><p><a href="https://cloud.tencent.com/developer/beta/article/1874790">https://cloud.tencent.com/developer/beta/article/1874790</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Pig开源项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 特殊java文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pig开源项目学习-git-commit-id-maven-plugin插件</title>
      <link href="/liukai/2023/05/10/Pig%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0-git-commit-id-maven-plugin%E6%8F%92%E4%BB%B6/"/>
      <url>/liukai/2023/05/10/Pig%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0-git-commit-id-maven-plugin%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="git-commit-id-maven-plugin插件简介"><a href="#git-commit-id-maven-plugin插件简介" class="headerlink" title="git-commit-id-maven-plugin插件简介"></a>git-commit-id-maven-plugin插件简介</h1><blockquote><p>摘要</p><p>本篇文章主要介绍本人正在学习的一个分布式开源项目所设计的技术 <strong>git-commit-id-maven-plugin</strong>插件.</p><p>对于此插件我们实际中只需要知道它是什么怎么用即可,不作为重点记录对象.</p></blockquote><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><blockquote><p>This plugin makes basic repository information available through maven resources. This can be used to display<br>“what version is this?” or “who has deployed this and when, from which branch?” information at runtime, making<br>it easy to find things like “oh, that isn’t deployed yet, I’ll test it tomorrow” and making both testers and<br>developers life easier. See <a href="https://github.com/git-commit-id/git-commit-id-maven-plugin">https://github.com/git-commit-id/git-commit-id-maven-plugin</a></p><p>翻译过来其实意思很简单:就是帮助开发人员清楚的看到打包部署的一些基本信息,比如谁在什么时间部署的哪一个分支等等;</p><p>具体详细的信息我们其实可以参考其github地址:</p><p><a href="https://github.com/git-commit-id/git-commit-id-maven-plugin">https://github.com/git-commit-id/git-commit-id-maven-plugin</a></p></blockquote><h2 id="2-maven依赖"><a href="#2-maven依赖" class="headerlink" title="2 maven依赖"></a>2 maven依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--打包jar 与git commit 关联插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.git-commit-id<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>git-commit-id-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;git.commit.plugin&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>get-the-git-infos<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>revision<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>initialize<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">failOnNoGitDirectory</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnNoGitDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">generateGitPropertiesFile</span>&gt;</span>true<span class="tag">&lt;/<span class="name">generateGitPropertiesFile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--因为项目定制了jackson的日期时间序列化/反序列化格式，</span></span><br><span class="line"><span class="comment">因此这里要进行配置,不然通过management.info.git.mode=full进行完整git信息监控时会存在问题</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dateFormat</span>&gt;</span>yyyy-MM-dd HH:mm:ss<span class="tag">&lt;/<span class="name">dateFormat</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includeOnlyProperties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includeOnlyProperty</span>&gt;</span>^git.build.(time|version)$<span class="tag">&lt;/<span class="name">includeOnlyProperty</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includeOnlyProperty</span>&gt;</span>^git.commit.(id|message|time).*$<span class="tag">&lt;/<span class="name">includeOnlyProperty</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includeOnlyProperties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-使用实例"><a href="#3-使用实例" class="headerlink" title="3 使用实例"></a>3 使用实例</h2><blockquote><p>使用示例其实可以参考<a href="https://gitee.com/log4j/pig">Pig开源</a>项目的使用也可以百度搜索相关内容,或者到管网查看使用教程</p><p>类似文章连接:</p><p><a href="https://blog.csdn.net/u010979642/article/details/107810883">https://blog.csdn.net/u010979642/article/details/107810883</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Pig开源项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>订单超时解决方案-RocketMQ延迟消息</title>
      <link href="/liukai/2023/04/21/%E8%AE%A2%E5%8D%95%E8%B6%85%E6%97%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-RocketMQ%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF/"/>
      <url>/liukai/2023/04/21/%E8%AE%A2%E5%8D%95%E8%B6%85%E6%97%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-RocketMQ%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="订单超时解决方案RocketMQ延时消息"><a href="#订单超时解决方案RocketMQ延时消息" class="headerlink" title="订单超时解决方案RocketMQ延时消息"></a>订单超时解决方案RocketMQ延时消息</h1><blockquote><p>摘要:</p><p>本文主要介绍RocketMQ延时消息解决订单超时问题</p></blockquote><h2 id="1-RocketMQ简介"><a href="#1-RocketMQ简介" class="headerlink" title="1 RocketMQ简介"></a>1 RocketMQ简介</h2><blockquote><p>可以参考阿里云社区的这篇文章,写的很详细,并带有实际举例说明:</p><p><a href="https://developer.aliyun.com/article/780968">https://developer.aliyun.com/article/780968</a></p></blockquote><h2 id="2-延时消息解决订单超时问题"><a href="#2-延时消息解决订单超时问题" class="headerlink" title="2 延时消息解决订单超时问题"></a>2 延时消息解决订单超时问题</h2><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 分布式组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>订单超时解决方案-RabbitMQ死信队列</title>
      <link href="/liukai/2023/04/20/%E8%AE%A2%E5%8D%95%E8%B6%85%E6%97%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-RabbitMQ%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/"/>
      <url>/liukai/2023/04/20/%E8%AE%A2%E5%8D%95%E8%B6%85%E6%97%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-RabbitMQ%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMQ死信队列解决订单超时"><a href="#RabbitMQ死信队列解决订单超时" class="headerlink" title="RabbitMQ死信队列解决订单超时"></a>RabbitMQ死信队列解决订单超时</h1><blockquote><p>摘要:</p><p>本文主要介绍利用分布式组件RabbitMQ解决订单超时的问题</p></blockquote><h2 id="1-死信以及TTL概念"><a href="#1-死信以及TTL概念" class="headerlink" title="1  死信以及TTL概念"></a>1  死信以及TTL概念</h2><blockquote><p>死信，在官网中对应的单词为“Dead Letter”;</p><p>它是RabbitMQ中的一种消息机制</p><p>TTL：即消息的存活时间。RabbitMQ可以对队列和消息分别设置TTL，如果对队列设置，则队列中所有的消息都具有相同的过期时间。超过了这个时间，我们认为这个消息就死了，称之为死信。</p></blockquote><h3 id="1-1-队列中消息出现死信的几种情况"><a href="#1-1-队列中消息出现死信的几种情况" class="headerlink" title="1.1 队列中消息出现死信的几种情况"></a>1.1 队列中消息出现死信的几种情况</h3><blockquote><ol><li>消息被否定确认,其实就是呗消费者拒绝.使用 <code>channel.basicNack</code> 或 <code>channel.basicReject</code> ，并且此时<code>requeue</code> 属性被设置为<code>false</code>;</li><li>消息在队列中存活的时间超过设置的TTL时间;</li><li>消息在队列的消息数量已经超过了最大的队列长度;(队列可以设置最大消息数量的属性,如果超出了这个范围那么多出来的就是死信).</li></ol></blockquote><h3 id="1-2-如何配置死信队列"><a href="#1-2-如何配置死信队列" class="headerlink" title="1.2  如何配置死信队列"></a>1.2  如何配置死信队列</h3><blockquote><p>上面说到三种消息成为死信的情况,那么我们成为死信的消息将”何去何从”呢?</p><p>其实我们一样可以创建一个专门接收死信的队列来存放管理这些消息—死信队列</p><p>死信队列其实就是一个普通的队列;所以配置过程如下:</p><ol><li>配置业务队列,配置业务交换机,并将业务队列绑定到交换机上;</li><li>配置业务队列的时候为业务队列设置属性,(TTL过期时间,死信交换机名称,可死信队列路由key)</li><li>配置死信队列,配置死信交换机(就是一个普通的交换机),为死信队列绑定死信交换机;</li></ol></blockquote><h3 id="1-3-队列属性"><a href="#1-3-队列属性" class="headerlink" title="1.3 队列属性"></a>1.3 队列属性</h3><blockquote><p>上面说到为业务队列设置属性,以便队列中的消息变成死信之后通过死信交换机路由到死信队列,下面就是我们要配置的属性</p><ol><li>x-dead-letter-exchange 此属性设置死信交换机名称</li><li>x-dead-letter-routing-key 此属性设置死信队列的routing key</li><li>x-message-ttl 此属性设置队列中消息过期时间单位ms</li><li>x-max-length 此属性设置队列的最大消息数量,超过这个值的消息将会变成死信</li></ol><p>注意:</p><p>​x-message-ttl属性设置的是队列中所有消息的过期时间,我们也可以在发送消息的时候单独设置每一个消息的过期时间;</p><p>​如果消息队列和消息都设置了过期时间,那么哪一个设置的时间小就按照哪一个.</p></blockquote><h2 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2 代码实现"></a>2 代码实现</h2><blockquote><p>理论的东西整理结束了下面就可以直接上代码和演示截图了</p><p>下面是主要代码</p></blockquote><h3 id="2-1-配置死信队列死信交换机"><a href="#2-1-配置死信队列死信交换机" class="headerlink" title="2.1 配置死信队列死信交换机"></a>2.1 配置死信队列死信交换机</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 死信队列交换机配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/4/19 13:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DieExchangeQueueConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务队列A</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Queue &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">busQueueA</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 队列过期时间TTL,单位毫秒</span></span><br><span class="line">        args.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// x-dead-letter-exchange    这里声明当前队列绑定的死信交换机</span></span><br><span class="line">        args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, RabbitMqConstant.DIE_AB_TOPIC_EXCHANGE_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// x-dead-letter-routing-key  这里声明当前队列的死信路由key</span></span><br><span class="line">        args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, RabbitRoutingKeyEnum.DIE_QUEUE_A_ROUTING_KEY.getValue());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(RabbitMqConstant.BUS_QUEUE_A_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务队列AB的交换机</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> TopicExchange &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">busAbTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(RabbitMqConstant.BUS_AB_TOPIC_EXCHANGE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务队列A绑定到业务AB交换机</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Binding &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindBusTopicExchangeA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                <span class="comment">// 绑定队列</span></span><br><span class="line">                .bind(busQueueA())</span><br><span class="line">                <span class="comment">// 到交换机</span></span><br><span class="line">                .to(busAbTopicExchange())</span><br><span class="line">                .with(RabbitRoutingKeyEnum.BUS_QUEUE_A_ROUTING_KEY.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 死信队列A</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Queue &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">dieQueueA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(RabbitMqConstant.DIE_QUEUE_A_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 死信交换机</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> TopicExchange &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">dieAbTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(RabbitMqConstant.DIE_AB_TOPIC_EXCHANGE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 死信队列A绑定死信交换机</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Binding &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindDieTopicExchangeA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                <span class="comment">// 绑定队列</span></span><br><span class="line">                .bind(dieQueueA())</span><br><span class="line">                <span class="comment">// 到交换机</span></span><br><span class="line">                .to(dieAbTopicExchange())</span><br><span class="line">                .with(RabbitRoutingKeyEnum.DIE_QUEUE_A_ROUTING_KEY.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-消费方监听"><a href="#2-2-消费方监听" class="headerlink" title="2.2 消费方监听"></a>2.2 消费方监听</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 死信队列消息监听消费者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/4/19 17:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DieRabbitListener</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitMqConstant.DIE_QUEUE_A_NAME)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dieA</span><span class="params">(Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者接收到死信队列A中的消息:&quot;</span> + map.toString());</span><br><span class="line">        <span class="comment">// 根据 订单ID查询DB更新订单状态,设置订单过期.增加库存...</span></span><br><span class="line">        <span class="comment">//coding... 这里后面单独列出一期订单秒杀业务博文再详细复述.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-模拟生产方"><a href="#2-3-模拟生产方" class="headerlink" title="2.3 模拟生产方"></a>2.3 模拟生产方</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rabbitmq/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqTestController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RabbitMqTestService rabbitMqTestService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/send/message/topic/die/queue/a&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">sendMessageTopicDieQueueA</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rabbitMqTestService.sendMessageTopicDieQueueA(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqTestServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">RabbitMqTestService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">sendMessageTopicDieQueueA</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; messageMap = getMessageMap(message);</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMqConstant.BUS_AB_TOPIC_EXCHANGE_NAME, RabbitRoutingKeyEnum.BUS_QUEUE_A_ROUTING_KEY.getValue(), messageMap);</span><br><span class="line">        <span class="keyword">return</span> messageMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意:</p><p>注意这种方式是正常发送消息到业务队列,我们在上面已经配置了业务队列的ttl(args.put(“x-message-ttl”, 5000);)所以这里面的消息如果超过可这个时间没有被消费者消费就会进入死信队列,我们消费方就会监听到死信队列中的消息,</p><p>此外我们还可以单独对消息设置ttl这样如果该消息的ttl如果比对列的小就会按照消息的ttl走</p><p>对消息单独设置TTL的代码如下:</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">sendMessageTopicDieQueueAttlmes</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; messageMap = getMessageMap(message);</span><br><span class="line">        <span class="comment">//给消息设置过期时间</span></span><br><span class="line">        <span class="type">MessagePostProcessor</span> <span class="variable">messagePostProcessor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessagePostProcessor</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Message <span class="title function_">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException &#123;</span><br><span class="line">                <span class="comment">// 这里单位也是毫秒，但这里是字符串的形式</span></span><br><span class="line">                message.getMessageProperties().setExpiration(<span class="string">&quot;3000&quot;</span>);</span><br><span class="line">                <span class="comment">//还可以为消息设置编码</span></span><br><span class="line">                message.getMessageProperties().setContentEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> message;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMqConstant.BUS_AB_TOPIC_EXCHANGE_NAME, RabbitRoutingKeyEnum.BUS_QUEUE_A_ROUTING_KEY.getValue(), messageMap, messagePostProcessor);</span><br><span class="line">        <span class="keyword">return</span> messageMap;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-运行截图"><a href="#3-运行截图" class="headerlink" title="3 运行截图"></a>3 运行截图</h2><blockquote><p>有消费者消费情况下 不会进入死信队列中</p></blockquote><p><img src="https://gitee.com/mrkay0313/images/raw/master/img/20230421100458.png"><br><img src="https://gitee.com/mrkay0313/images/raw/master/img/20230421100525.png"></p><blockquote><p>注释掉业务队列的监听三秒之后进入死信队列</p></blockquote><p><img src="https://gitee.com/mrkay0313/images/raw/master/img/20230421100703.png"></p><blockquote><p>不对消息单独设置TTL的设置就不再演示 上面已经可以看出当单独对消息设置TTL之后如果TTL比队列的TTL小就会按照消息的走3秒时效</p><p>如果不单独设置就会按照队列的TTL走5秒时效</p></blockquote><h2 id="4-结束语"><a href="#4-结束语" class="headerlink" title="4 结束语"></a>4 结束语</h2><blockquote><p>参考链接:</p><p><a href="https://cloud.tencent.com/developer/article/1463065">【RabbitMQ】一文带你搞定RabbitMQ死信队列 - 腾讯云开发者社区-腾讯云</a></p><p><a href="https://blog.csdn.net/doupengzp/article/details/106929216">RabbitMQ的死信队列详解及实现_窦朋飞的博客-CSDN博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 分布式组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CountDownLatch和线程池的简单使用</title>
      <link href="/liukai/2023/04/18/CountDownLatch%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/liukai/2023/04/18/CountDownLatch%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="记录一次CountDownLatch和ScheduledExecutorService线程池使用"><a href="#记录一次CountDownLatch和ScheduledExecutorService线程池使用" class="headerlink" title="记录一次CountDownLatch和ScheduledExecutorService线程池使用"></a>记录一次CountDownLatch和ScheduledExecutorService线程池使用</h1><blockquote><p>摘要:</p><p>本文主要记录使用ScheduledExecutorService任务调度线程池配合CountDownLatch 计数器实现一次大文件处理的业务.</p></blockquote><h2 id="1-ScheduledExecutorService-介绍"><a href="#1-ScheduledExecutorService-介绍" class="headerlink" title="1 ScheduledExecutorService 介绍"></a>1 ScheduledExecutorService 介绍</h2><blockquote><p>ScheduledExecutorService是基于ExecutorService的功能实现的延迟和周期执行任务的功能。每个任务以及每个任务的每个周期都会提交到线程池中由线程去执行，所以任务在不同周期内执行它的线程可能是不同的。ScheduledExecutorService接口的默认实现类是ScheduledThreadPoolExecutor。在周期执行的任务中，如果任务执行时间大于周期时间，则会以任务时间优先，等任务执行完毕后才会进入下一次周期</p><p>参考链接: <a href="https://blog.csdn.net/liuyu973971883/article/details/108059865">https://blog.csdn.net/liuyu973971883/article/details/108059865</a></p></blockquote><h2 id="2-CountDownLatch-介绍"><a href="#2-CountDownLatch-介绍" class="headerlink" title="2 CountDownLatch 介绍"></a>2 CountDownLatch 介绍</h2><blockquote><p>CountDownLatch是一个同步工具类，用来协调多个线程之间的同步，或者说起到线程之间的通信（而不是用作互斥的作用）。</p><p>CountDownLatch能够使一个线程在等待另外一些线程完成各自工作之后，再继续执行。使用一个计数器进行实现。计数器初始值为线程的数量。当每一个线程完成自己任务后，计数器的值就会减一。当计数器的值为0时，表示所有的线程都已经完成一些任务，然后在CountDownLatch上等待的线程就可以恢复执行接下来的任务。</p></blockquote><h3 id="2-1-典型用法"><a href="#2-1-典型用法" class="headerlink" title="2.1 典型用法"></a>2.1 典型用法</h3><blockquote><p>CountDownLatch典型用法：1、某一线程在开始运行前等待n个线程执行完毕。将CountDownLatch的计数器初始化为new CountDownLatch(n)，每当一个任务线程执行完毕，就将计数器减1 countdownLatch.countDown()，当计数器的值变为0时，在CountDownLatch上await()的线程就会被唤醒。一个典型应用场景就是启动一个服务时，主线程需要等待多个组件加载完毕，之后再继续执行。</p></blockquote><blockquote><p>CountDownLatch典型用法：2、实现多个线程开始执行任务的最大并行性。注意是并行性，不是并发，强调的是多个线程在某一时刻同时开始执行。类似于赛跑，将多个线程放到起点，等待发令枪响，然后同时开跑。做法是初始化一个共享的CountDownLatch(1)，将其计算器初始化为1，多个线程在开始执行任务前首先countdownlatch.await()，当主线程调用countDown()时，计数器变为0，多个线程同时被唤醒。</p></blockquote><blockquote><p>资料参考链接: <a href="https://www.cnblogs.com/Lee_xy_z/p/10470181.html">https://www.cnblogs.com/Lee_xy_z/p/10470181.html</a></p></blockquote><h2 id="3-具体到业务"><a href="#3-具体到业务" class="headerlink" title="3 具体到业务"></a>3 具体到业务</h2><blockquote><p>本次使用任务调度线程池和线程计数器的背景是项目中需要解析一个超大json文件,</p><p>文件中有超过10W个不规则图形组成的大的地图模型json(模型提供的地图map文件,单文件大小近80M,不规则图形的每一个点对应一个经纬度),我的任务就是判断DB表里的一些点,哪些在此大的地图map中(json图形中,不是点对点是点在地图范围内)</p><p>解决此类问题单线程解决肯定不可行,所以就使用了多线程,当时需要拆分大的json文件,经过查阅资料了解到任务调度线程池更契合本次业务需求,最终选择使用CountDownLatch 线程计数器配合ScheduledExecutorService完成业务</p></blockquote><h3 id="3-1-简单罗列主要业务代码"><a href="#3-1-简单罗列主要业务代码" class="headerlink" title="3.1 简单罗列主要业务代码"></a>3.1 简单罗列主要业务代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreviewModelServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PreviewModelService</span> &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">callBack</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> ModelGetBodyParamsUtil.getBodyParamToJsonObj(request);</span><br><span class="line">        <span class="keyword">if</span> (jsonObject != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">taskId</span> <span class="operator">=</span> jsonObject.getStr(<span class="string">&quot;taskId&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> jsonObject.getStr(<span class="string">&quot;status&quot;</span>);</span><br><span class="line">            <span class="comment">//阻塞线程执行 保证多线程执行期间不会有其他线程进入</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ModelDealEnum.DEAL_STATUS_SUCCESS.getValue().equals(status)) &#123;</span><br><span class="line">                    <span class="comment">//根据idx查找是已经推送获取过结果</span></span><br><span class="line">                    List&lt;ModelAnalyzeResultIdx&gt; pushedList = modelAnalyzeResultIdxMapper.selectPushedDatasByIdx(taskId);</span><br><span class="line">                    <span class="keyword">if</span> (CollUtil.isNotEmpty(pushedList)) &#123;</span><br><span class="line">                        <span class="comment">//解析数据并入库</span></span><br><span class="line">                        <span class="type">ModelAnalyzeResultIdx</span> <span class="variable">source</span> <span class="operator">=</span> pushedList.get(<span class="number">0</span>);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">//获取floodRisk积水风险统计geoJson(多线程进行处理GeoJson)</span></span><br><span class="line">                            List&lt;WaterPoint&gt; waterPoints = analyzeService.analyzeGeoJsonDatas(source);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            log.error(<span class="string">&quot;模型解析错误&quot;</span>, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.keepsoft.devbase.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.collection.CollUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.crypto.digest.MD5;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.HttpUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONArray;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.dynamic.datasource.annotation.DS;</span><br><span class="line"><span class="keyword">import</span> com.keepsoft.devbase.entity.ModelAnalyzeResultIdx;</span><br><span class="line"><span class="keyword">import</span> com.keepsoft.devbase.entity.ModelDataPng;</span><br><span class="line"><span class="keyword">import</span> com.keepsoft.devbase.entity.ModelFileResultIdx;</span><br><span class="line"><span class="keyword">import</span> com.keepsoft.devbase.entity.WaterPoint;</span><br><span class="line"><span class="keyword">import</span> com.keepsoft.devbase.enums.ModelDealEnum;</span><br><span class="line"><span class="keyword">import</span> com.keepsoft.devbase.mapper.ModelAnalyzeResultIdxMapper;</span><br><span class="line"><span class="keyword">import</span> com.keepsoft.devbase.mapper.ModelDataPngMapper;</span><br><span class="line"><span class="keyword">import</span> com.keepsoft.devbase.mapper.ModelFileResultIdxMapper;</span><br><span class="line"><span class="keyword">import</span> com.keepsoft.devbase.mapper.WaterPointMapper;</span><br><span class="line"><span class="keyword">import</span> com.keepsoft.devbase.service.AnalyzeService;</span><br><span class="line"><span class="keyword">import</span> com.keepsoft.devbase.task.ModelGeoJsonDealTask;</span><br><span class="line"><span class="keyword">import</span> com.keepsoft.devbase.utils.ConfigUtils;</span><br><span class="line"><span class="keyword">import</span> com.keepsoft.devbase.utils.GeoJsonUtil;</span><br><span class="line"><span class="keyword">import</span> com.keepsoft.devbase.utils.ZipFileUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.concurrent.BasicThreadFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledThreadPoolExecutor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/24 10:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnalyzeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AnalyzeService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ScheduledExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScheduledThreadPoolExecutor</span>(<span class="number">12</span>, <span class="keyword">new</span> <span class="title class_">BasicThreadFactory</span>.Builder().namingPattern(<span class="string">&quot;model-geojson-analyze-pool-%d&quot;</span>).daemon(<span class="literal">true</span>).build());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@DS(value = &quot;hsyb&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;WaterPoint&gt; <span class="title function_">analyzeGeoJsonDatas</span><span class="params">(ModelAnalyzeResultIdx source)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//coding ...</span></span><br><span class="line">        <span class="comment">//需要多线程处理</span></span><br><span class="line">        <span class="keyword">if</span> (GeoJsonUtil.needMultiThreadDeal(allReseaus)) &#123;</span><br><span class="line">            List&lt;List&lt;List&lt;JSONArray&gt;&gt;&gt; splitContainer = GeoJsonUtil.split(allReseaus, <span class="number">20000</span>);</span><br><span class="line">            <span class="comment">//计数器:所有子线程开始处理数据集等待计数结束之后主线程开始执行</span></span><br><span class="line">            List&lt;WaterPoint&gt; waterPoints = waterPointMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">            <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(splitContainer.size());</span><br><span class="line">            List&lt;ModelGeoJsonDealTask&gt; taskList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;ModelGeoJsonDealTask&gt;(splitContainer.size());</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; splitContainer.size(); i++) &#123;</span><br><span class="line">                <span class="type">ModelGeoJsonDealTask</span> <span class="variable">task_i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelGeoJsonDealTask</span>(<span class="literal">true</span>, latch, splitContainer.get(i), waterPoints);</span><br><span class="line">                taskList.add(task_i);</span><br><span class="line">                <span class="comment">//执行</span></span><br><span class="line">                executorService.submit(task_i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//阻塞主线程</span></span><br><span class="line">            latch.await();</span><br><span class="line">            <span class="comment">//主线程开始处理</span></span><br><span class="line">            <span class="comment">//coding ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * GeoJson处理线程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/1 9:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModelGeoJsonDealTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程计数器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 待处理数据集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;List&lt;JSONArray&gt;&gt; toDealList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内涝点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;WaterPoint&gt; waterPoints;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程得到的在网格内的内涝点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;WaterPoint&gt; inReseauWaterPoints = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;WaterPoint&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最终结果容器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;List&lt;String&gt;&gt; resultList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ModelGeoJsonDealTask</span><span class="params">(<span class="type">boolean</span> success, CountDownLatch countDownLatch, List&lt;List&lt;JSONArray&gt;&gt; toDealList, List&lt;WaterPoint&gt; waterPoints)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.success = success;</span><br><span class="line">        <span class="built_in">this</span>.countDownLatch = countDownLatch;</span><br><span class="line">        <span class="built_in">this</span>.toDealList = toDealList;</span><br><span class="line">        <span class="built_in">this</span>.waterPoints = waterPoints;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">stms</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            log.info(<span class="string">&quot;======处理geojson线程：【&#123;&#125;】开始执行解析，当前时间(毫秒值)：【&#123;&#125;】&quot;</span>, Thread.currentThread().getName(), stms);</span><br><span class="line">            <span class="comment">//拼网格</span></span><br><span class="line">            GeoJsonUtil.spliceReseausAndDecidePointInReseau(toDealList, resultList, waterPoints, inReseauWaterPoints);</span><br><span class="line"></span><br><span class="line">            <span class="type">long</span> <span class="variable">endms</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="type">long</span> <span class="variable">during</span> <span class="operator">=</span> (endms - stms) / <span class="number">1000</span>;</span><br><span class="line">            log.info(<span class="string">&quot;======处理geojson线程：【&#123;&#125;】解析执行结束，当前时间(毫秒值)：【&#123;&#125;ms】，用时：【&#123;&#125;s】&quot;</span>, Thread.currentThread().getName(), endms, during);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;处理geojson线程:【&#123;&#125;】,处理geojson发生异常:&quot;</span>, Thread.currentThread().getName(), e);</span><br><span class="line">            <span class="comment">//失败</span></span><br><span class="line">            success = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//计数器减1</span></span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-结束语"><a href="#4-结束语" class="headerlink" title="4 结束语"></a>4 结束语</h2><blockquote><p>本文只是见到那记录 ScheduledExecutorService 和 CountDownLatch 的使用具体详细概念并没有做详细学习,后期会多线程篇章里深入学习记录.</p></blockquote><h2 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5 参考链接"></a>5 参考链接</h2><blockquote><p> <a href="https://blog.csdn.net/liuyu973971883/article/details/108059865">https://blog.csdn.net/liuyu973971883/article/details/108059865</a></p><p><a href="https://www.cnblogs.com/Lee_xy_z/p/10470181.html">https://www.cnblogs.com/Lee_xy_z/p/10470181.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 多线程线程池 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CountDownLatch </tag>
            
            <tag> ScheduledExecutorService </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis发布订阅和Redis监听</title>
      <link href="/liukai/2023/04/15/Redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E5%92%8CRedis%E7%9B%91%E5%90%AC/"/>
      <url>/liukai/2023/04/15/Redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E5%92%8CRedis%E7%9B%91%E5%90%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis发布订阅和监听"><a href="#Redis发布订阅和监听" class="headerlink" title="Redis发布订阅和监听"></a>Redis发布订阅和监听</h1><blockquote><p>摘要”</p><p>本篇博客主要介绍以下内容:</p><ul><li>Redis发布订阅;</li><li>Redis监听过期</li></ul></blockquote><h2 id="1-Redis发布订阅"><a href="#1-Redis发布订阅" class="headerlink" title="1 Redis发布订阅"></a>1 Redis发布订阅</h2><blockquote><p>注意:</p><p>Redis版本大于等2.0</p></blockquote><h3 id="1-1-Redis发布订阅代码"><a href="#1-1-Redis发布订阅代码" class="headerlink" title="1.1 Redis发布订阅代码"></a>1.1 Redis发布订阅代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/3/22 15:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;redis.topic&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String redisTopic;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisMessageListenerContainer <span class="title function_">listenerContainer</span><span class="params">(RedisConnectionFactory factory, MessageListenerAdapter messageListenerAdapter)</span> &#123;</span><br><span class="line">        <span class="type">RedisMessageListenerContainer</span> <span class="variable">container</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisMessageListenerContainer</span>();</span><br><span class="line">        container.setConnectionFactory(factory);</span><br><span class="line">        List&lt;Topic&gt; topicList = Arrays.asList(<span class="keyword">new</span> <span class="title class_">PatternTopic</span>(redisTopic));</span><br><span class="line">        container.addMessageListener(messageListenerAdapter, topicList);</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageListenerAdapter <span class="title function_">messageListenerAdapter</span><span class="params">(RedisReceiver redisReceiver)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MessageListenerAdapter</span>(redisReceiver, <span class="string">&quot;onMessage&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis 消息监听回调</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/3/22 15:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisReceiver</span> <span class="keyword">implements</span> <span class="title class_">MessageListener</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes   字节数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(<span class="meta">@Nullable</span> Message message, <span class="meta">@Nullable</span> <span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;进来了回调方法！&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;回调的信息 message=&#123;&#125;&quot;</span>, message);</span><br><span class="line">        log.info(<span class="string">&quot;回调的信息 bytes=&#123;&#125;&quot;</span>, StrUtil.str(bytes, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-Redis发布订阅结果演示"><a href="#1-2-Redis发布订阅结果演示" class="headerlink" title="1.2 Redis发布订阅结果演示"></a>1.2 Redis发布订阅结果演示</h3><blockquote><p>首先创建一个controller来完成模拟发布方</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试控制层</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/3/22 0:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;测试接口层&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test/apis&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ISysUserService iSysUserService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IStWyzService iStWyzService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;redis.topic&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String redisTopic;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/redis/message/push&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;Redis发布消息&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wyzList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SysUser</span> <span class="variable">user</span> <span class="operator">=</span> iSysUserService.getUser(<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">        stringRedisTemplate.convertAndSend(redisTopic, JSONUtil.toJsonStr(user));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>发送后控制台打印结果截图如下</p></blockquote><p><img src="http://gitee.com/mrkay0313/images/raw/master/img/20230415233536.png"></p><p><img src="http://gitee.com/mrkay0313/images/raw/master/img/20230415233608.png"></p><p><img src="http://gitee.com/mrkay0313/images/raw/master/img/20230415233637.png"></p><h2 id="2-Redis监听过期Key"><a href="#2-Redis监听过期Key" class="headerlink" title="2 Redis监听过期Key"></a>2 Redis监听过期Key</h2><blockquote><p>Redis监听过期Key需要对Redis配置文件 reids.windows.config 文件进行修改</p><p>这里演示使用windows版Redis的修改,Linux修改的参数一致</p></blockquote><h3 id="2-1-修改Redis配置并重启"><a href="#2-1-修改Redis配置并重启" class="headerlink" title="2.1 修改Redis配置并重启"></a>2.1 修改Redis配置并重启</h3><p><img src="http://gitee.com/mrkay0313/images/raw/master/img/20230415234716.png"></p><blockquote><p>启动重启redis服务</p><p>redis-server redis.windows.config</p></blockquote><h3 id="2-2-代码中增加过期监听topic"><a href="#2-2-代码中增加过期监听topic" class="headerlink" title="2.2 代码中增加过期监听topic"></a>2.2 代码中增加过期监听topic</h3><blockquote><p>增加代码如下</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/3/22 15:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;redis.topic&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String redisTopic;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisMessageListenerContainer <span class="title function_">listenerContainer</span><span class="params">(RedisConnectionFactory factory, MessageListenerAdapter messageListenerAdapter)</span> &#123;</span><br><span class="line">        <span class="type">RedisMessageListenerContainer</span> <span class="variable">container</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisMessageListenerContainer</span>();</span><br><span class="line">        container.setConnectionFactory(factory);</span><br><span class="line">        List&lt;Topic&gt; topicList = Arrays.asList(<span class="keyword">new</span> <span class="title class_">PatternTopic</span>(<span class="string">&quot;__keyevent@0__:expired&quot;</span>), <span class="keyword">new</span> <span class="title class_">PatternTopic</span>(redisTopic));</span><br><span class="line">        container.addMessageListener(messageListenerAdapter, topicList);</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageListenerAdapter <span class="title function_">messageListenerAdapter</span><span class="params">(RedisReceiver redisReceiver)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MessageListenerAdapter</span>(redisReceiver, <span class="string">&quot;onMessage&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-Redis监听过期Key结果演示"><a href="#2-3-Redis监听过期Key结果演示" class="headerlink" title="2.3 Redis监听过期Key结果演示"></a>2.3 Redis监听过期Key结果演示</h3><blockquote><p>controller增加一个接口</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试控制层</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liukai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/3/22 0:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;测试接口层&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test/apis&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ISysUserService iSysUserService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IStWyzService iStWyzService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;redis.topic&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String redisTopic;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/redis/message/push&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;Redis发布消息&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wyzList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SysUser</span> <span class="variable">user</span> <span class="operator">=</span> iSysUserService.getUser(<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">        stringRedisTemplate.convertAndSend(redisTopic, JSONUtil.toJsonStr(user));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/redis/message/listener/exp&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;redis监听过期key&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">redisMessageListenerExp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SysUser</span> <span class="variable">user</span> <span class="operator">=</span> iSysUserService.getUser(<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">        <span class="comment">//60秒过期</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;exp_key_&quot;</span> + RandomUtil.randomNumbers(<span class="number">5</span>), user.getUserName(), <span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>控制太答应结果如下</p></blockquote><p><img src="http://gitee.com/mrkay0313/images/raw/master/img/20230415235651.png"></p><p><img src="http://gitee.com/mrkay0313/images/raw/master/img/20230415235738.png"></p><p><img src="http://gitee.com/mrkay0313/images/raw/master/img/20230415235816.png"></p><h2 id="3-结束语"><a href="#3-结束语" class="headerlink" title="3 结束语"></a>3 结束语</h2><blockquote><p>本次主要记录了Redis的发布订阅和过期监听并没有Redis进行深入研究.</p><p>好了文章记录结束</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/liukai/2023/04/10/hello-world/"/>
      <url>/liukai/2023/04/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
